basePath: /v1
definitions:
  data.Message:
    properties:
      created_at:
        type: string
      id:
        type: integer
      message:
        type: string
      user_id:
        type: integer
      version:
        type: integer
    type: object
  data.TokenFull:
    properties:
      expiry:
        type: string
      hash:
        format: base64
        type: string
      plaintext:
        type: string
      scope:
        type: string
      userID:
        type: integer
    type: object
  data.User:
    properties:
      activated:
        type: boolean
      created_at:
        type: string
      email:
        type: string
      id:
        type: integer
      name:
        type: string
      password_hash:
        format: base64
        type: string
      version:
        type: integer
    type: object
  messages.messagesResponsePayload:
    properties:
      messages:
        items:
          $ref: '#/definitions/data.Message'
        type: array
      metadata:
        $ref: '#/definitions/pagination.Metadata'
    type: object
  pagination.Metadata:
    properties:
      current_page:
        type: integer
      first_page:
        type: integer
      last_page:
        type: integer
      page_size:
        type: integer
      total_records:
        type: integer
    type: object
  responses.StringResponsePayload:
    properties:
      message:
        type: string
    type: object
host: api.seanflannery.dev
info:
  contact:
    email: seanflannery10@gmail.com
    name: Core Support
    url: github.com/seanflannery10/
  description: This is a core server.
  title: Core API
  version: 0.1.0
paths:
  /messages:
    get:
      operationId: get-user-messages
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/messages.messagesResponsePayload'
      summary: get user messages
    post:
      operationId: create-message
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/data.Message'
      summary: create new message
  /messages/{id}:
    delete:
      operationId: delete-message
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.StringResponsePayload'
      summary: delete a message
    get:
      operationId: get-message
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/data.Message'
      summary: get a message
    put:
      operationId: update-message
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/data.Message'
      summary: update a message
  /tokens/access:
    post:
      operationId: create-token-access
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/data.TokenFull'
      summary: create access token using a refresh token
  /tokens/activation:
    post:
      operationId: create-token-activation
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/data.TokenFull'
      summary: create activation token using an email address
  /tokens/password-reset:
    post:
      operationId: create-token-password-reset
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/data.TokenFull'
      summary: create password reset token using an email address
  /tokens/refresh:
    post:
      operationId: create-token-refresh
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/data.TokenFull'
      summary: create refresh token using an email address
  /users/activate:
    patch:
      operationId: activate-user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/data.User'
      summary: activate new inactivate account using a token
  /users/register:
    post:
      operationId: create-user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/data.User'
      summary: create new user account
  /users/update-password:
    patch:
      operationId: update-user-password
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.StringResponsePayload'
      summary: update user password using a token
swagger: "2.0"
