name: test
on:
  workflow_call:
  pull_request:
jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go: [ 'stable', 'oldstable' ]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ matrix.go }}
          check-latest: true
      - name: Go Format
        run: gofmt -s -w . && git diff --exit-code
      - name: Go Tidy
        run: go mod tidy && git diff --exit-code
      - name: Go Mod
        run: go mod download
      - name: Go Mod Verify
        run: go mod verify
      - name: Build code
        run: go build -o /dev/null ./...
  test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: test
          POSTGRES_DB: test
        ports:
          - 5433:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: stable
          check-latest: true
      - name: Install dbmate
        run: |
          curl -L https://github.com/amacneil/dbmate/releases/download/v2.2.0/dbmate-linux-amd64 --output dbmate
          sudo chmod +x dbmate
          sudo mv dbmate /usr/local/bin/dbmate
          which dbmate
      - name: Apply Migrations
        run: |
          dbmate -d "./db/migrations" --url postgres://postgres:test@localhost:5433/test?sslmode=disable down
          dbmate -d "./db/test_data" --url postgres://postgres:test@localhost:5433/test?sslmode=disable down
          dbmate -d "./db/migrations" --url postgres://postgres:test@localhost:5433/test?sslmode=disable up
          dbmate -d "./db/test_data" --url postgres://postgres:test@localhost:5433/test?sslmode=disable up
      - name: Test code
        run: go test -race -vet=off ./...
  generate:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: stable
          check-latest: true
      - name: Install sqlc
        run: |
          curl -L https://github.com/kyleconroy/sqlc/releases/download/v1.17.2/sqlc_1.17.2_linux_amd64.tar.gz | tar xvz
          sudo mv sqlc /usr/local/bin/sqlc
          which sqlc
      - name: Install ogen
        run: go install github.com/ogen-go/ogen/cmd/ogen@v0.61.0
      - name: sqlc Compile
        run: sqlc compile --experimental
      - name: sqlc Generate
        run: sqlc generate --experimental && git diff --exit-code
      - name: ogen Server Generate
        run: ogen -no-client -no-webhook-client -no-webhook-server -generate-tests --target internal/api -package api --clean openapi.yaml && git diff --exit-code
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: stable
          check-latest: true
      - name: Lint code
        uses: golangci/golangci-lint-action@08e2f20817b15149a52b5b3ebe7de50aff2ba8c5 # V3.4.0
        # https://api.github.com/repos/golangci/golangci-lint-action/tags
        with:
          version: v1.52.0