// Code generated by ogen, DO NOT EDIT.

package api

import (
	"fmt"
	"time"
)

func (s *ErrorResponseStatusCode) Error() string {
	return fmt.Sprintf("code %d: %+v", s.StatusCode, s.Response)
}

// Contains a message.
// Ref: #/components/schemas/AcceptanceResponse
type AcceptanceResponse struct {
	Message string `json:"message"`
}

// GetMessage returns the value of Message.
func (s *AcceptanceResponse) GetMessage() string {
	return s.Message
}

// SetMessage sets the value of Message.
func (s *AcceptanceResponse) SetMessage(val string) {
	s.Message = val
}

func (*AcceptanceResponse) deleteMessageRes()      {}
func (*AcceptanceResponse) updateUserPasswordRes() {}

type ActivateUserBadRequest ErrorResponse

func (*ActivateUserBadRequest) activateUserRes() {}

type ActivateUserInternalServerError ErrorResponse

func (*ActivateUserInternalServerError) activateUserRes() {}

type ActivateUserNotFound ErrorResponse

func (*ActivateUserNotFound) activateUserRes() {}

type ActivateUserUnauthorized ErrorResponse

func (*ActivateUserUnauthorized) activateUserRes() {}

type ActivateUserUnprocessableEntity ErrorResponse

func (*ActivateUserUnprocessableEntity) activateUserRes() {}

type BearerAuth struct {
	Token string
}

// GetToken returns the value of Token.
func (s *BearerAuth) GetToken() string {
	return s.Token
}

// SetToken sets the value of Token.
func (s *BearerAuth) SetToken(val string) {
	s.Token = val
}

type DeleteMessageBadRequest ErrorResponse

func (*DeleteMessageBadRequest) deleteMessageRes() {}

type DeleteMessageInternalServerError ErrorResponse

func (*DeleteMessageInternalServerError) deleteMessageRes() {}

type DeleteMessageNotFound ErrorResponse

func (*DeleteMessageNotFound) deleteMessageRes() {}

type DeleteMessageUnauthorized ErrorResponse

func (*DeleteMessageUnauthorized) deleteMessageRes() {}

type DeleteMessageUnprocessableEntity ErrorResponse

func (*DeleteMessageUnprocessableEntity) deleteMessageRes() {}

// Contains a message and error.
// Ref: #/components/schemas/ErrorResponse
type ErrorResponse struct {
	Message string `json:"message"`
	Error   string `json:"error"`
}

// GetMessage returns the value of Message.
func (s *ErrorResponse) GetMessage() string {
	return s.Message
}

// GetError returns the value of Error.
func (s *ErrorResponse) GetError() string {
	return s.Error
}

// SetMessage sets the value of Message.
func (s *ErrorResponse) SetMessage(val string) {
	s.Message = val
}

// SetError sets the value of Error.
func (s *ErrorResponse) SetError(val string) {
	s.Error = val
}

// ErrorResponseStatusCode wraps ErrorResponse with StatusCode.
type ErrorResponseStatusCode struct {
	StatusCode int
	Response   ErrorResponse
}

// GetStatusCode returns the value of StatusCode.
func (s *ErrorResponseStatusCode) GetStatusCode() int {
	return s.StatusCode
}

// GetResponse returns the value of Response.
func (s *ErrorResponseStatusCode) GetResponse() ErrorResponse {
	return s.Response
}

// SetStatusCode sets the value of StatusCode.
func (s *ErrorResponseStatusCode) SetStatusCode(val int) {
	s.StatusCode = val
}

// SetResponse sets the value of Response.
func (s *ErrorResponseStatusCode) SetResponse(val ErrorResponse) {
	s.Response = val
}

type GetMessageBadRequest ErrorResponse

func (*GetMessageBadRequest) getMessageRes() {}

type GetMessageInternalServerError ErrorResponse

func (*GetMessageInternalServerError) getMessageRes() {}

type GetMessageNotFound ErrorResponse

func (*GetMessageNotFound) getMessageRes() {}

type GetMessageUnauthorized ErrorResponse

func (*GetMessageUnauthorized) getMessageRes() {}

type GetMessageUnprocessableEntity ErrorResponse

func (*GetMessageUnprocessableEntity) getMessageRes() {}

type GetUserMessagesBadRequest ErrorResponse

func (*GetUserMessagesBadRequest) getUserMessagesRes() {}

type GetUserMessagesInternalServerError ErrorResponse

func (*GetUserMessagesInternalServerError) getUserMessagesRes() {}

type GetUserMessagesNotFound ErrorResponse

func (*GetUserMessagesNotFound) getUserMessagesRes() {}

type GetUserMessagesUnauthorized ErrorResponse

func (*GetUserMessagesUnauthorized) getUserMessagesRes() {}

type GetUserMessagesUnprocessableEntity ErrorResponse

func (*GetUserMessagesUnprocessableEntity) getUserMessagesRes() {}

// Contains a message as well as optional properties.
// Ref: #/components/schemas/MessageRequest
type MessageRequest struct {
	Message string `json:"message"`
}

// GetMessage returns the value of Message.
func (s *MessageRequest) GetMessage() string {
	return s.Message
}

// SetMessage sets the value of Message.
func (s *MessageRequest) SetMessage(val string) {
	s.Message = val
}

// Contains a message as well as optional properties.
// Ref: #/components/schemas/MessageResponse
type MessageResponse struct {
	ID      int64  `json:"id"`
	Message string `json:"message"`
	Version int32  `json:"version"`
}

// GetID returns the value of ID.
func (s *MessageResponse) GetID() int64 {
	return s.ID
}

// GetMessage returns the value of Message.
func (s *MessageResponse) GetMessage() string {
	return s.Message
}

// GetVersion returns the value of Version.
func (s *MessageResponse) GetVersion() int32 {
	return s.Version
}

// SetID sets the value of ID.
func (s *MessageResponse) SetID(val int64) {
	s.ID = val
}

// SetMessage sets the value of Message.
func (s *MessageResponse) SetMessage(val string) {
	s.Message = val
}

// SetVersion sets the value of Version.
func (s *MessageResponse) SetVersion(val int32) {
	s.Version = val
}

func (*MessageResponse) getMessageRes()    {}
func (*MessageResponse) newMessageRes()    {}
func (*MessageResponse) updateMessageRes() {}

// Contains metadata.
// Ref: #/components/schemas/MessagesMetadataResponse
type MessagesMetadataResponse struct {
	CurrentPage  int `json:"current_page"`
	FirstPage    int `json:"first_page"`
	LastPage     int `json:"last_page"`
	PageSize     int `json:"page_size"`
	TotalRecords int `json:"total_records"`
}

// GetCurrentPage returns the value of CurrentPage.
func (s *MessagesMetadataResponse) GetCurrentPage() int {
	return s.CurrentPage
}

// GetFirstPage returns the value of FirstPage.
func (s *MessagesMetadataResponse) GetFirstPage() int {
	return s.FirstPage
}

// GetLastPage returns the value of LastPage.
func (s *MessagesMetadataResponse) GetLastPage() int {
	return s.LastPage
}

// GetPageSize returns the value of PageSize.
func (s *MessagesMetadataResponse) GetPageSize() int {
	return s.PageSize
}

// GetTotalRecords returns the value of TotalRecords.
func (s *MessagesMetadataResponse) GetTotalRecords() int {
	return s.TotalRecords
}

// SetCurrentPage sets the value of CurrentPage.
func (s *MessagesMetadataResponse) SetCurrentPage(val int) {
	s.CurrentPage = val
}

// SetFirstPage sets the value of FirstPage.
func (s *MessagesMetadataResponse) SetFirstPage(val int) {
	s.FirstPage = val
}

// SetLastPage sets the value of LastPage.
func (s *MessagesMetadataResponse) SetLastPage(val int) {
	s.LastPage = val
}

// SetPageSize sets the value of PageSize.
func (s *MessagesMetadataResponse) SetPageSize(val int) {
	s.PageSize = val
}

// SetTotalRecords sets the value of TotalRecords.
func (s *MessagesMetadataResponse) SetTotalRecords(val int) {
	s.TotalRecords = val
}

// Contains messages and metadata objects.
// Ref: #/components/schemas/MessagesResponse
type MessagesResponse struct {
	Messages []MessageResponse        `json:"messages"`
	Metadata MessagesMetadataResponse `json:"metadata"`
}

// GetMessages returns the value of Messages.
func (s *MessagesResponse) GetMessages() []MessageResponse {
	return s.Messages
}

// GetMetadata returns the value of Metadata.
func (s *MessagesResponse) GetMetadata() MessagesMetadataResponse {
	return s.Metadata
}

// SetMessages sets the value of Messages.
func (s *MessagesResponse) SetMessages(val []MessageResponse) {
	s.Messages = val
}

// SetMetadata sets the value of Metadata.
func (s *MessagesResponse) SetMetadata(val MessagesMetadataResponse) {
	s.Metadata = val
}

func (*MessagesResponse) getUserMessagesRes() {}

type NewAccessTokenBadRequest ErrorResponse

func (*NewAccessTokenBadRequest) newAccessTokenRes() {}

type NewAccessTokenInternalServerError ErrorResponse

func (*NewAccessTokenInternalServerError) newAccessTokenRes() {}

type NewAccessTokenUnauthorized ErrorResponse

func (*NewAccessTokenUnauthorized) newAccessTokenRes() {}

type NewActivationTokenBadRequest ErrorResponse

func (*NewActivationTokenBadRequest) newActivationTokenRes() {}

type NewActivationTokenInternalServerError ErrorResponse

func (*NewActivationTokenInternalServerError) newActivationTokenRes() {}

type NewActivationTokenNotFound ErrorResponse

func (*NewActivationTokenNotFound) newActivationTokenRes() {}

type NewActivationTokenUnprocessableEntity ErrorResponse

func (*NewActivationTokenUnprocessableEntity) newActivationTokenRes() {}

type NewMessageBadRequest ErrorResponse

func (*NewMessageBadRequest) newMessageRes() {}

type NewMessageInternalServerError ErrorResponse

func (*NewMessageInternalServerError) newMessageRes() {}

type NewMessageNotFound ErrorResponse

func (*NewMessageNotFound) newMessageRes() {}

type NewMessageUnauthorized ErrorResponse

func (*NewMessageUnauthorized) newMessageRes() {}

type NewMessageUnprocessableEntity ErrorResponse

func (*NewMessageUnprocessableEntity) newMessageRes() {}

type NewPasswordResetTokenBadRequest ErrorResponse

func (*NewPasswordResetTokenBadRequest) newPasswordResetTokenRes() {}

type NewPasswordResetTokenInternalServerError ErrorResponse

func (*NewPasswordResetTokenInternalServerError) newPasswordResetTokenRes() {}

type NewPasswordResetTokenNotFound ErrorResponse

func (*NewPasswordResetTokenNotFound) newPasswordResetTokenRes() {}

type NewPasswordResetTokenUnprocessableEntity ErrorResponse

func (*NewPasswordResetTokenUnprocessableEntity) newPasswordResetTokenRes() {}

type NewRefreshTokenBadRequest ErrorResponse

func (*NewRefreshTokenBadRequest) newRefreshTokenRes() {}

type NewRefreshTokenInternalServerError ErrorResponse

func (*NewRefreshTokenInternalServerError) newRefreshTokenRes() {}

type NewRefreshTokenNotFound ErrorResponse

func (*NewRefreshTokenNotFound) newRefreshTokenRes() {}

type NewRefreshTokenUnauthorized ErrorResponse

func (*NewRefreshTokenUnauthorized) newRefreshTokenRes() {}

type NewRefreshTokenUnprocessableEntity ErrorResponse

func (*NewRefreshTokenUnprocessableEntity) newRefreshTokenRes() {}

type NewUserBadRequest ErrorResponse

func (*NewUserBadRequest) newUserRes() {}

type NewUserInternalServerError ErrorResponse

func (*NewUserInternalServerError) newUserRes() {}

type NewUserNotFound ErrorResponse

func (*NewUserNotFound) newUserRes() {}

type NewUserUnprocessableEntity ErrorResponse

func (*NewUserUnprocessableEntity) newUserRes() {}

// NewOptDateTime returns new OptDateTime with value set to v.
func NewOptDateTime(v time.Time) OptDateTime {
	return OptDateTime{
		Value: v,
		Set:   true,
	}
}

// OptDateTime is optional time.Time.
type OptDateTime struct {
	Value time.Time
	Set   bool
}

// IsSet returns true if OptDateTime was set.
func (o OptDateTime) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDateTime) Reset() {
	var v time.Time
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDateTime) SetTo(v time.Time) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDateTime) Get() (v time.Time, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDateTime) Or(d time.Time) time.Time {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInt returns new OptInt with value set to v.
func NewOptInt(v int) OptInt {
	return OptInt{
		Value: v,
		Set:   true,
	}
}

// OptInt is optional int.
type OptInt struct {
	Value int
	Set   bool
}

// IsSet returns true if OptInt was set.
func (o OptInt) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt) Reset() {
	var v int
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt) SetTo(v int) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt) Get() (v int, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt) Or(d int) int {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// Contains a plaintext token as well as optional properties.
// Ref: #/components/schemas/TokenRequest
type TokenRequest struct {
	Plaintext string `json:"plaintext"`
}

// GetPlaintext returns the value of Plaintext.
func (s *TokenRequest) GetPlaintext() string {
	return s.Plaintext
}

// SetPlaintext sets the value of Plaintext.
func (s *TokenRequest) SetPlaintext(val string) {
	s.Plaintext = val
}

// Contains a plaintext token as well as optional properties.
// Ref: #/components/schemas/TokenResponse
type TokenResponse struct {
	Scope     OptString   `json:"scope"`
	Expiry    OptDateTime `json:"expiry"`
	Plaintext string      `json:"plaintext"`
}

// GetScope returns the value of Scope.
func (s *TokenResponse) GetScope() OptString {
	return s.Scope
}

// GetExpiry returns the value of Expiry.
func (s *TokenResponse) GetExpiry() OptDateTime {
	return s.Expiry
}

// GetPlaintext returns the value of Plaintext.
func (s *TokenResponse) GetPlaintext() string {
	return s.Plaintext
}

// SetScope sets the value of Scope.
func (s *TokenResponse) SetScope(val OptString) {
	s.Scope = val
}

// SetExpiry sets the value of Expiry.
func (s *TokenResponse) SetExpiry(val OptDateTime) {
	s.Expiry = val
}

// SetPlaintext sets the value of Plaintext.
func (s *TokenResponse) SetPlaintext(val string) {
	s.Plaintext = val
}

func (*TokenResponse) newActivationTokenRes()    {}
func (*TokenResponse) newPasswordResetTokenRes() {}

// TokenResponseHeaders wraps TokenResponse with response headers.
type TokenResponseHeaders struct {
	SetCookie OptString
	Response  TokenResponse
}

// GetSetCookie returns the value of SetCookie.
func (s *TokenResponseHeaders) GetSetCookie() OptString {
	return s.SetCookie
}

// GetResponse returns the value of Response.
func (s *TokenResponseHeaders) GetResponse() TokenResponse {
	return s.Response
}

// SetSetCookie sets the value of SetCookie.
func (s *TokenResponseHeaders) SetSetCookie(val OptString) {
	s.SetCookie = val
}

// SetResponse sets the value of Response.
func (s *TokenResponseHeaders) SetResponse(val TokenResponse) {
	s.Response = val
}

func (*TokenResponseHeaders) newAccessTokenRes()  {}
func (*TokenResponseHeaders) newRefreshTokenRes() {}

type UpdateMessageBadRequest ErrorResponse

func (*UpdateMessageBadRequest) updateMessageRes() {}

type UpdateMessageConflict ErrorResponse

func (*UpdateMessageConflict) updateMessageRes() {}

type UpdateMessageInternalServerError ErrorResponse

func (*UpdateMessageInternalServerError) updateMessageRes() {}

type UpdateMessageNotFound ErrorResponse

func (*UpdateMessageNotFound) updateMessageRes() {}

type UpdateMessageUnauthorized ErrorResponse

func (*UpdateMessageUnauthorized) updateMessageRes() {}

type UpdateMessageUnprocessableEntity ErrorResponse

func (*UpdateMessageUnprocessableEntity) updateMessageRes() {}

type UpdateUserPasswordBadRequest ErrorResponse

func (*UpdateUserPasswordBadRequest) updateUserPasswordRes() {}

type UpdateUserPasswordInternalServerError ErrorResponse

func (*UpdateUserPasswordInternalServerError) updateUserPasswordRes() {}

type UpdateUserPasswordNotFound ErrorResponse

func (*UpdateUserPasswordNotFound) updateUserPasswordRes() {}

// Contains a password and token object.
// Ref: #/components/schemas/UpdateUserPasswordRequest
type UpdateUserPasswordRequest struct {
	Password string `json:"password"`
	Token    string `json:"token"`
}

// GetPassword returns the value of Password.
func (s *UpdateUserPasswordRequest) GetPassword() string {
	return s.Password
}

// GetToken returns the value of Token.
func (s *UpdateUserPasswordRequest) GetToken() string {
	return s.Token
}

// SetPassword sets the value of Password.
func (s *UpdateUserPasswordRequest) SetPassword(val string) {
	s.Password = val
}

// SetToken sets the value of Token.
func (s *UpdateUserPasswordRequest) SetToken(val string) {
	s.Token = val
}

type UpdateUserPasswordUnauthorized ErrorResponse

func (*UpdateUserPasswordUnauthorized) updateUserPasswordRes() {}

type UpdateUserPasswordUnprocessableEntity ErrorResponse

func (*UpdateUserPasswordUnprocessableEntity) updateUserPasswordRes() {}

// Contains an email address.
// Ref: #/components/schemas/UserEmailRequest
type UserEmailRequest struct {
	Email string `json:"email"`
}

// GetEmail returns the value of Email.
func (s *UserEmailRequest) GetEmail() string {
	return s.Email
}

// SetEmail sets the value of Email.
func (s *UserEmailRequest) SetEmail(val string) {
	s.Email = val
}

// Contains an email address and password.
// Ref: #/components/schemas/UserLoginRequest
type UserLoginRequest struct {
	Email    string `json:"email"`
	Password string `json:"password"`
}

// GetEmail returns the value of Email.
func (s *UserLoginRequest) GetEmail() string {
	return s.Email
}

// GetPassword returns the value of Password.
func (s *UserLoginRequest) GetPassword() string {
	return s.Password
}

// SetEmail sets the value of Email.
func (s *UserLoginRequest) SetEmail(val string) {
	s.Email = val
}

// SetPassword sets the value of Password.
func (s *UserLoginRequest) SetPassword(val string) {
	s.Password = val
}

// Contains a username, email and password.
// Ref: #/components/schemas/UserRequest
type UserRequest struct {
	Name     string `json:"name"`
	Email    string `json:"email"`
	Password string `json:"password"`
}

// GetName returns the value of Name.
func (s *UserRequest) GetName() string {
	return s.Name
}

// GetEmail returns the value of Email.
func (s *UserRequest) GetEmail() string {
	return s.Email
}

// GetPassword returns the value of Password.
func (s *UserRequest) GetPassword() string {
	return s.Password
}

// SetName sets the value of Name.
func (s *UserRequest) SetName(val string) {
	s.Name = val
}

// SetEmail sets the value of Email.
func (s *UserRequest) SetEmail(val string) {
	s.Email = val
}

// SetPassword sets the value of Password.
func (s *UserRequest) SetPassword(val string) {
	s.Password = val
}

// Contains a username, email and password.
// Ref: #/components/schemas/UserResponse
type UserResponse struct {
	Name    string `json:"name"`
	Email   string `json:"email"`
	Version int32  `json:"version"`
}

// GetName returns the value of Name.
func (s *UserResponse) GetName() string {
	return s.Name
}

// GetEmail returns the value of Email.
func (s *UserResponse) GetEmail() string {
	return s.Email
}

// GetVersion returns the value of Version.
func (s *UserResponse) GetVersion() int32 {
	return s.Version
}

// SetName sets the value of Name.
func (s *UserResponse) SetName(val string) {
	s.Name = val
}

// SetEmail sets the value of Email.
func (s *UserResponse) SetEmail(val string) {
	s.Email = val
}

// SetVersion sets the value of Version.
func (s *UserResponse) SetVersion(val int32) {
	s.Version = val
}

func (*UserResponse) activateUserRes() {}

// UserResponseHeaders wraps UserResponse with response headers.
type UserResponseHeaders struct {
	SetCookie OptString
	Response  UserResponse
}

// GetSetCookie returns the value of SetCookie.
func (s *UserResponseHeaders) GetSetCookie() OptString {
	return s.SetCookie
}

// GetResponse returns the value of Response.
func (s *UserResponseHeaders) GetResponse() UserResponse {
	return s.Response
}

// SetSetCookie sets the value of SetCookie.
func (s *UserResponseHeaders) SetSetCookie(val OptString) {
	s.SetCookie = val
}

// SetResponse sets the value of Response.
func (s *UserResponseHeaders) SetResponse(val UserResponse) {
	s.Response = val
}

func (*UserResponseHeaders) newUserRes() {}
