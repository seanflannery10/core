// Code generated by ogen, DO NOT EDIT.

package api

import (
	"github.com/go-faster/jx"

	std "encoding/json"
	"testing"

	"github.com/stretchr/testify/require"
)

func TestAcceptanceResponse_EncodeDecode(t *testing.T) {
	var typ AcceptanceResponse
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 AcceptanceResponse
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestErrorResponse_EncodeDecode(t *testing.T) {
	var typ ErrorResponse
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 ErrorResponse
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestMessageRequest_EncodeDecode(t *testing.T) {
	var typ MessageRequest
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 MessageRequest
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestMessageResponse_EncodeDecode(t *testing.T) {
	var typ MessageResponse
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 MessageResponse
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestMessagesMetadataResponse_EncodeDecode(t *testing.T) {
	var typ MessagesMetadataResponse
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 MessagesMetadataResponse
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestMessagesResponse_EncodeDecode(t *testing.T) {
	var typ MessagesResponse
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 MessagesResponse
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestTokenRequest_EncodeDecode(t *testing.T) {
	var typ TokenRequest
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 TokenRequest
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestTokenResponse_EncodeDecode(t *testing.T) {
	var typ TokenResponse
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 TokenResponse
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestUpdateUserPasswordRequest_EncodeDecode(t *testing.T) {
	var typ UpdateUserPasswordRequest
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 UpdateUserPasswordRequest
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestUserEmailRequest_EncodeDecode(t *testing.T) {
	var typ UserEmailRequest
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 UserEmailRequest
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestUserLoginRequest_EncodeDecode(t *testing.T) {
	var typ UserLoginRequest
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 UserLoginRequest
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestUserRequest_EncodeDecode(t *testing.T) {
	var typ UserRequest
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 UserRequest
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestUserResponse_EncodeDecode(t *testing.T) {
	var typ UserResponse
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 UserResponse
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
