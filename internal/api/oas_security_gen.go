// Code generated by ogen, DO NOT EDIT.

package api

import (
	"context"
	"net/http"
	"strings"
)

// SecurityHandler is handler for security parameters.
type SecurityHandler interface {
	// HandleAccess handles Access security.
	HandleAccess(ctx context.Context, operationName string, t Access) (context.Context, error)
	// HandleRefresh handles Refresh security.
	HandleRefresh(ctx context.Context, operationName string, t Refresh) (context.Context, error)
}

func findAuthorization(h http.Header, prefix string) (string, bool) {
	v, ok := h["Authorization"]
	if !ok {
		return "", false
	}
	for _, vv := range v {
		scheme, value, ok := strings.Cut(vv, " ")
		if !ok || !strings.EqualFold(scheme, prefix) {
			continue
		}
		return value, true
	}
	return "", false
}

func (s *Server) securityAccess(ctx context.Context, operationName string, req *http.Request) (context.Context, bool, error) {
	var t Access
	token, ok := findAuthorization(req.Header, "Bearer")
	if !ok {
		return ctx, false, nil
	}
	t.Token = token
	rctx, err := s.sec.HandleAccess(ctx, operationName, t)
	if err != nil {
		return nil, false, err
	}
	return rctx, true, err
}
func (s *Server) securityRefresh(ctx context.Context, operationName string, req *http.Request) (context.Context, bool, error) {
	var t Refresh
	const parameterName = "core_refresh_token"
	var value string
	switch cookie, err := req.Cookie(parameterName); err {
	case nil:
		value = cookie.Value
	case http.ErrNoCookie:
		return ctx, false, nil
	default:
		return nil, false, err
	}
	t.APIKey = value
	rctx, err := s.sec.HandleRefresh(ctx, operationName, t)
	if err != nil {
		return nil, false, err
	}
	return rctx, true, err
}
