// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.0
// source: messages.sql

package data

import (
	"context"
)

const createMessage = `-- name: CreateMessage :one
INSERT INTO messages (message, user_id)
VALUES ($1, $2)
RETURNING id, created_at, message, user_id, version
`

type CreateMessageParams struct {
	Message string
	UserID  int64
}

func (q *Queries) CreateMessage(ctx context.Context, arg CreateMessageParams) (Message, error) {
	row := q.db.QueryRow(ctx, createMessage, arg.Message, arg.UserID)
	var i Message
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.Message,
		&i.UserID,
		&i.Version,
	)
	return i, err
}

const deleteMessage = `-- name: DeleteMessage :exec
DELETE
FROM messages
WHERE id = $1
`

func (q *Queries) DeleteMessage(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteMessage, id)
	return err
}

const getMessage = `-- name: GetMessage :one
SELECT id, created_at, message, user_id, version
FROM messages
WHERE id = $1
`

func (q *Queries) GetMessage(ctx context.Context, id int64) (Message, error) {
	row := q.db.QueryRow(ctx, getMessage, id)
	var i Message
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.Message,
		&i.UserID,
		&i.Version,
	)
	return i, err
}

const getUserMessageCount = `-- name: GetUserMessageCount :one
SELECT count(*)
FROM messages
WHERE id = $1
`

func (q *Queries) GetUserMessageCount(ctx context.Context, id int64) (int64, error) {
	row := q.db.QueryRow(ctx, getUserMessageCount, id)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getUserMessages = `-- name: GetUserMessages :many
SELECT id,
       created_at,
       message,
       user_id,
       version
FROM messages
WHERE user_id = $1
ORDER BY created_at
OFFSET $2 LIMIT $3
`

type GetUserMessagesParams struct {
	UserID int64
	Offset int32
	Limit  int32
}

func (q *Queries) GetUserMessages(ctx context.Context, arg GetUserMessagesParams) ([]Message, error) {
	rows, err := q.db.Query(ctx, getUserMessages, arg.UserID, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Message
	for rows.Next() {
		var i Message
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.Message,
			&i.UserID,
			&i.Version,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateMessage = `-- name: UpdateMessage :one
UPDATE messages
SET message = $1,
    version = version + 1
WHERE id = $2
RETURNING id, created_at, message, user_id, version
`

type UpdateMessageParams struct {
	Message string
	ID      int64
}

func (q *Queries) UpdateMessage(ctx context.Context, arg UpdateMessageParams) (Message, error) {
	row := q.db.QueryRow(ctx, updateMessage, arg.Message, arg.ID)
	var i Message
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.Message,
		&i.UserID,
		&i.Version,
	)
	return i, err
}
