// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: tokens.sql

package data

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createRefreshToken = `-- name: CreateRefreshToken :one
INSERT INTO tokens (hash, user_id, expiry, session, scope)
VALUES ($1, $2, $3, $4, "refresh")
RETURNING hash, user_id, active, expiry, scope, session
`

type CreateRefreshTokenParams struct {
	Hash    []byte             `json:"hash"`
	UserID  int64              `json:"user_id"`
	Expiry  pgtype.Timestamptz `json:"expiry"`
	Session pgtype.Text        `json:"session"`
}

func (q *Queries) CreateRefreshToken(ctx context.Context, arg CreateRefreshTokenParams) (Token, error) {
	row := q.db.QueryRow(ctx, createRefreshToken,
		arg.Hash,
		arg.UserID,
		arg.Expiry,
		arg.Session,
	)
	var i Token
	err := row.Scan(
		&i.Hash,
		&i.UserID,
		&i.Active,
		&i.Expiry,
		&i.Scope,
		&i.Session,
	)
	return i, err
}

const createToken = `-- name: CreateToken :one
INSERT INTO tokens (hash, user_id, expiry, scope)
VALUES ($1, $2, $3, $4)
RETURNING hash, user_id, active, expiry, scope, session
`

type CreateTokenParams struct {
	Hash   []byte             `json:"hash"`
	UserID int64              `json:"user_id"`
	Expiry pgtype.Timestamptz `json:"expiry"`
	Scope  string             `json:"scope"`
}

func (q *Queries) CreateToken(ctx context.Context, arg CreateTokenParams) (Token, error) {
	row := q.db.QueryRow(ctx, createToken,
		arg.Hash,
		arg.UserID,
		arg.Expiry,
		arg.Scope,
	)
	var i Token
	err := row.Scan(
		&i.Hash,
		&i.UserID,
		&i.Active,
		&i.Expiry,
		&i.Scope,
		&i.Session,
	)
	return i, err
}

const deactivateRefreshTokens = `-- name: DeactivateRefreshTokens :exec
UPDATE tokens
SET active = false
WHERE session = $1
  AND user_id = $2
`

type DeactivateRefreshTokensParams struct {
	Session pgtype.Text `json:"session"`
	UserID  int64       `json:"user_id"`
}

func (q *Queries) DeactivateRefreshTokens(ctx context.Context, arg DeactivateRefreshTokensParams) error {
	_, err := q.db.Exec(ctx, deactivateRefreshTokens, arg.Session, arg.UserID)
	return err
}

const deleteAllTokensForUser = `-- name: DeleteAllTokensForUser :exec
DELETE
FROM tokens
WHERE scope = $1
  AND user_id = $2
`

type DeleteAllTokensForUserParams struct {
	Scope  string `json:"scope"`
	UserID int64  `json:"user_id"`
}

func (q *Queries) DeleteAllTokensForUser(ctx context.Context, arg DeleteAllTokensForUserParams) error {
	_, err := q.db.Exec(ctx, deleteAllTokensForUser, arg.Scope, arg.UserID)
	return err
}

const deleteSessionTokensForUser = `-- name: DeleteSessionTokensForUser :exec
DELETE
FROM tokens
WHERE scope = "refresh"
  AND user_id = $1
  AND session = $2
`

type DeleteSessionTokensForUserParams struct {
	UserID  int64       `json:"user_id"`
	Session pgtype.Text `json:"session"`
}

func (q *Queries) DeleteSessionTokensForUser(ctx context.Context, arg DeleteSessionTokensForUserParams) error {
	_, err := q.db.Exec(ctx, deleteSessionTokensForUser, arg.UserID, arg.Session)
	return err
}
