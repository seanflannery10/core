// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: tokens.sql

package data

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const checkRefreshToken = `-- name: CheckRefreshToken :one
SELECT EXISTS(SELECT 1
              FROM tokens
              WHERE scope = "refresh"
                AND active = false
                AND hash = $1
                AND user_id = $2)::bool
`

type CheckRefreshTokenParams struct {
	Hash   []byte `json:"hash"`
	UserID int64  `json:"user_id"`
}

func (q *Queries) CheckRefreshToken(ctx context.Context, arg CheckRefreshTokenParams) (bool, error) {
	row := q.db.QueryRow(ctx, checkRefreshToken, arg.Hash, arg.UserID)
	var column_1 bool
	err := row.Scan(&column_1)
	return column_1, err
}

const createToken = `-- name: CreateToken :one
INSERT INTO tokens (hash, user_id, expiry, scope)
VALUES ($1, $2, $3, $4)
RETURNING scope, expiry, hash, user_id, active
`

type CreateTokenParams struct {
	Hash   []byte           `json:"hash"`
	UserID int64            `json:"user_id"`
	Expiry pgtype.Timestamp `json:"expiry"`
	Scope  string           `json:"scope"`
}

func (q *Queries) CreateToken(ctx context.Context, arg CreateTokenParams) (Token, error) {
	row := q.db.QueryRow(ctx, createToken,
		arg.Hash,
		arg.UserID,
		arg.Expiry,
		arg.Scope,
	)
	var i Token
	err := row.Scan(
		&i.Scope,
		&i.Expiry,
		&i.Hash,
		&i.UserID,
		&i.Active,
	)
	return i, err
}

const deactivateToken = `-- name: DeactivateToken :exec
UPDATE tokens
SET active = false
WHERE scope = $1
  AND hash = $2
  AND user_id = $3
`

type DeactivateTokenParams struct {
	Scope  string `json:"scope"`
	Hash   []byte `json:"hash"`
	UserID int64  `json:"user_id"`
}

func (q *Queries) DeactivateToken(ctx context.Context, arg DeactivateTokenParams) error {
	_, err := q.db.Exec(ctx, deactivateToken, arg.Scope, arg.Hash, arg.UserID)
	return err
}

const deleteTokens = `-- name: DeleteTokens :exec
DELETE
FROM tokens
WHERE scope = $1
  AND user_id = $2
`

type DeleteTokensParams struct {
	Scope  string `json:"scope"`
	UserID int64  `json:"user_id"`
}

func (q *Queries) DeleteTokens(ctx context.Context, arg DeleteTokensParams) error {
	_, err := q.db.Exec(ctx, deleteTokens, arg.Scope, arg.UserID)
	return err
}
