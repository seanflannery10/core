openapi: 3.0.3
info:
  title: Core API
  description: This is a core server.
  contact:
    name: Core Support
    url: https://github.com/seanflannery10/
    email: seanflannery10@gmail.com
  version: 0.1.0
servers:
  - url: http://localhost:4000/
  - url: https//api.seanflannery.dev/
paths:
  /v1/messages:
    get:
      tags:
        - messages
      operationId: GetUserMessages
      security:
        - Access: [ ]
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/pageSize'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessagesResponse'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        404:
          $ref: '#/components/responses/404'
        422:
          $ref: '#/components/responses/422'
        500:
          $ref: '#/components/responses/500'
        default:
          $ref: '#/components/responses/default'
    post:
      tags:
        - messages
      operationId: NewMessage
      security:
        - Access: [ ]
      requestBody:
        $ref: '#/components/requestBodies/MessageRequestBody'
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        404:
          $ref: '#/components/responses/404'
        422:
          $ref: '#/components/responses/422'
        500:
          $ref: '#/components/responses/500'
        default:
          $ref: '#/components/responses/default'
  /v1/messages/{id}:
    get:
      tags:
        - messages
      operationId: GetMessage
      security:
        - Access: [ ]
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        404:
          $ref: '#/components/responses/404'
        422:
          $ref: '#/components/responses/422'
        500:
          $ref: '#/components/responses/500'
        default:
          $ref: '#/components/responses/default'
    put:
      tags:
        - messages
      operationId: UpdateMessage
      security:
        - Access: [ ]
      parameters:
        - $ref: '#/components/parameters/id'
      requestBody:
        $ref: '#/components/requestBodies/MessageRequestBody'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        404:
          $ref: '#/components/responses/404'
        409:
          $ref: '#/components/responses/409'
        422:
          $ref: '#/components/responses/422'
        500:
          $ref: '#/components/responses/500'
        default:
          $ref: '#/components/responses/default'
    delete:
      tags:
        - messages
      operationId: DeleteMessage
      security:
        - Access: [ ]
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AcceptanceResponse'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        404:
          $ref: '#/components/responses/404'
        422:
          $ref: '#/components/responses/422'
        500:
          $ref: '#/components/responses/500'
        default:
          $ref: '#/components/responses/default'
  /v1/tokens/access:
    post:
      tags:
        - tokens
      operationId: NewAccessToken
      security:
        - Refresh: [ ]
      parameters:
         - $ref: '#/components/parameters/refreshTokenCookie'
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenResponse'
          headers:
            Set-Cookie:
              description: "Contains encrypted refresh token"
              schema:
                type: string
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        500:
          $ref: '#/components/responses/500'
        default:
          $ref: '#/components/responses/default'
  /v1/tokens/activation:
    post:
      tags:
        - tokens
      operationId: NewActivationToken
      requestBody:
        $ref: '#/components/requestBodies/UserEmailRequestBody'
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenResponse'
        400:
          $ref: '#/components/responses/400'
        404:
          $ref: '#/components/responses/404'
        422:
          $ref: '#/components/responses/422'
        500:
          $ref: '#/components/responses/500'
        default:
          $ref: '#/components/responses/default'
  /v1/tokens/password-reset:
    post:
      tags:
        - tokens
      operationId: NewPasswordResetToken
      requestBody:
        $ref: '#/components/requestBodies/UserEmailRequestBody'
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenResponse'
        400:
          $ref: '#/components/responses/400'
        404:
          $ref: '#/components/responses/404'
        422:
          $ref: '#/components/responses/422'
        500:
          $ref: '#/components/responses/500'
        default:
          $ref: '#/components/responses/default'
  /v1/tokens/refresh:
    post:
      tags:
        - tokens
      operationId: NewRefreshToken
      security:
        - Refresh: [ ]
      requestBody:
        $ref: '#/components/requestBodies/UserLoginRequestBody'
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenResponse'
          headers:
            Set-Cookie:
              description: "Contains encrypted refresh token"
              schema:
                type: string
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        404:
          $ref: '#/components/responses/404'
        422:
          $ref: '#/components/responses/422'
        500:
          $ref: '#/components/responses/500'
        default:
          $ref: '#/components/responses/default'
  /v1/users/activate:
    patch:
      tags:
        - users
      operationId: ActivateUser
      requestBody:
        $ref: '#/components/requestBodies/TokenRequestBody'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        404:
          $ref: '#/components/responses/404'
        422:
          $ref: '#/components/responses/422'
        500:
          $ref: '#/components/responses/500'
        default:
          $ref: '#/components/responses/default'
  /v1/users/register:
    post:
      tags:
        - users
      operationId: NewUser
      requestBody:
        $ref: '#/components/requestBodies/UserRequestBody'
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        400:
          $ref: '#/components/responses/400'
        404:
          $ref: '#/components/responses/404'
        422:
          $ref: '#/components/responses/422'
        500:
          $ref: '#/components/responses/500'
        default:
          $ref: '#/components/responses/default'
  /v1/users/update-password:
    patch:
      tags:
        - users
      operationId: UpdateUserPassword
      requestBody:
        $ref: '#/components/requestBodies/UpdateUserPasswordRequestBody'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AcceptanceResponse'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        404:
          $ref: '#/components/responses/404'
        422:
          $ref: '#/components/responses/422'
        500:
          $ref: '#/components/responses/500'
        default:
          $ref: '#/components/responses/default'
components:
  parameters:
    id:
      name: id
      in: path
      required: true
      schema:
        type: integer
        format: int64
    page:
      name: page
      in: query
      required: true
      schema:
        type: integer
        format: int32
        default: 1
    pageSize:
      name: page_size
      in: query
      required: true
      schema:
        type: integer
        format: int32
        minimum: 5
        maximum: 100
        default: 20
    refreshTokenCookie:
      name: core_refresh_token
      in: cookie
      required: true
      schema:
        type: string
  requestBodies:
    MessageRequestBody:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/MessageRequest'
    UpdateUserPasswordRequestBody:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UpdateUserPasswordRequest'
    UserEmailRequestBody:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UserEmailRequest'
    UserLoginRequestBody:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UserLoginRequest'
    UserRequestBody:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UserRequest'
    TokenRequestBody:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TokenRequest'
  responses:
    400:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    401:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    404:
      description: Not Found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    422:
      description: Unprocessable Entity
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    409:
      description: Conflict
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    500:
      description: Internal Server Error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    default:
      description: Default Error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
  schemas:
    MessageRequest:
      type: object
      description: "Contains a message as well as optional properties"
      properties:
        message:
          type: string
      required:
        - message
    TokenRequest:
      type: object
      description: "Contains a plaintext token as well as optional properties"
      properties:
        plaintext:
          type: string
          format: password
      required:
        - plaintext
    UpdateUserPasswordRequest:
      type: object
      description: "Contains a password and token object"
      properties:
        password:
          type: string
          format: password
        token:
          type: string
          format: password
      required:
        - password
        - token
    UserRequest:
      type: object
      description: "Contains a username, email and password"
      properties:
        name:
          type: string
          format: name
        email:
          type: string
          format: email
        password:
          type: string
          format: password
      required:
        - name
        - email
        - password
    UserEmailRequest:
      type: object
      description: "Contains an email address"
      properties:
        email:
          type: string
          format: email
      required:
        - email
    UserLoginRequest:
      type: object
      description: "Contains an email address and password"
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          format: password
      required:
        - email
        - password
    AcceptanceResponse:
      type: object
      description: "Contains a message"
      properties:
        message:
          type: string
      required:
        - message
    ErrorResponse:
      type: object
      description: "Contains an error"
      properties:
        error:
          type: string
      required:
        - message
        - error
    MessageResponse:
      type: object
      description: "Contains a message as well as optional properties"
      properties:
        id:
          type: integer
          format: int64
        message:
          type: string
        version:
          type: integer
          format: int32
      required:
        - id
        - message
        - version
    MessagesResponse:
      type: object
      description: "Contains messages and metadata objects"
      properties:
        messages:
          type: array
          items:
            $ref: '#/components/schemas/MessageResponse'
        metadata:
          $ref: '#/components/schemas/MessagesMetadataResponse'
      required:
        - messages
        - metadata
    MessagesMetadataResponse:
      type: object
      description: "Contains metadata"
      properties:
        current_page:
          type: integer
          format: int32
        first_page:
          type: integer
          format: int32
        last_page:
          type: integer
          format: int32
        page_size:
          type: integer
          format: int32
        total_records:
          type: integer
          format: int64
      required:
        - current_page
        - first_page
        - last_page
        - page_size
        - total_records
    TokenResponse:
      type: object
      description: "Contains a plaintext token as well as optional properties"
      properties:
        scope:
          type: string
        expiry:
          type: string
          format: date-time
        plaintext:
          type: string
          format: password
      required:
        - plaintext
    UserResponse:
      type: object
      description: "Contains a username, email and password"
      properties:
        name:
          type: string
          format: name
        email:
          type: string
          format: email
        version:
          type: integer
          format: int32
      required:
        - name
        - email
        - version
  securitySchemes:
    Access:
      type: http
      scheme: bearer
    Refresh:
      type: apiKey
      in: cookie
      name: core_refresh_token